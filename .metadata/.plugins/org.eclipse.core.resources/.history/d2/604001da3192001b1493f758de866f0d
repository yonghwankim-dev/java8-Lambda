package java8.chapter02_컬렉션의사용.ch02_05;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.function.Predicate;
import java.util.stream.Collector;
import java.util.stream.Collectors;

public class PickDifferentNames {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		final List<String> friends = Arrays.asList("Brian", "Nate", "Neal", "Raju", "Sara", "Scott");
		final List<String> editors = Arrays.asList("Brian", "Jackie", "John", "Mike");
		final List<String> comrades = Arrays.asList("Kate", "Ken", "Nick", "Paula", "Zach");

		
		/**
		 * step1 friends 컬렉션에서 N이나 B로 시작하는 이름을 선택
		 * - 표면적으로는 맞는것처럼 보이지만 단지 찾고자 하는 시작 문자가 다르다는 이유만으로
		 * 두개의 Predicate를 사용하는 것은 중복이다.!!
		 * - 다음 단계에서 중복을 제거하는 방법을 알아봄
		 */
		final Predicate<String> startsWithN = name->name.startsWith("N");
		final Predicate<String> startsWithB = name->name.startsWith("B");
		
		final long countFriendsStartN = friends.stream()
												.filter(startsWithN)
												.count();
		
		final long countFriendsStartB = friends.stream()
												.filter(startsWithB)
												.count();
		
		
		/**
		 * step3 checkIfStartsWith()에 의해 리턴되는 람다 표현식을 사용
		 */
		final long countFirendsStartN2 = friends.stream()
												.filter(checkIfStartsWith("N")).count();
	}
	/**
	 * step2 렉시컬 스코프(lexical scope)로 중복 제거하기
	 * - 파라미터로 스트링 타입의 letter를 인수로 받는 정적함수인 checkIfStartsWith() 메소드 정의
	 * - Predicate를 리턴으로 넘김
	 * 
	 * - 렉시컬 스코프(lexical scope)
	 * 	변수 letter의 범위는 이 어노니머스(anonymous) 함수의 범위에 있지 않기 때문에 람다 표현식의
	 * 	정의에 대해 범위를 정하고 그 범위 안에서 변수 letter를 찾는다.
	 * 	이것을 렉시컬 스코프라고 한다.
	 * 
	 */
	public static Predicate<String> checkIfStartsWith(final String letter){
		return name->name.startsWith(letter);
	}
}
